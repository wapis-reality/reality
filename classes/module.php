<?phpclass Module{    var $id = null;    var $name = null;    var $viewVars = array();    var $params = array();    var $bModifyDbSource = false;    var $helpers = array();    function __construct($setting = null, $controller = null){        $this->controller = $controller;        if($setting) { //IF setting is null, then module is initiated only for one action for example save...            $this->params = $this->convertParams($setting);            $this->id = $setting['ClientMenuLayoutElement']['id'];            $this->name = $setting['ClientMenuLayoutElement']['widget'];            if(method_exists($this, 'init')){                $this->init();            }        }    }    /**     * @param array $widget     * @return array     */    function convertParams($widget = array())    {        $params = array();        foreach ($widget["ClientWidgetParam"] as $param) {            if ($this->groups == true) {                if (!isset($params[$param['groupl']])) {                    $params[$param['groupl']] = array();                }                $params[$param['groupl']][$param['param']] = $param['value'];            } else {                $params[$param['param']] = $param['value'];            }        }        return $params;    }    function getData(){        return array();    }    /**     * @return string     */    final function render()    {        foreach ($this->helpers as $hlp) {            $class_name = $hlp . 'Helper';            $helper_file = Paths::findPath('helper', Inflector::underscore($hlp) . ".php");            if ($helper_file == null)                die('Soubor pro helper "' . Inflector::underscore($hlp) . '.php" nebyl nalezen');            require_once ($helper_file);            $tmp_hlp = new $class_name();            if(isset($this->controller->data)) {                $tmp_hlp->data = $this->controller->data;            }else{                $tmp_hlp->data = array();            }            $this->viewVars[Inflector::underscore($hlp)] = $tmp_hlp;            unset($tmp_hlp);        }        $this->viewVars['data'] = $this->getData();        $this->viewVars['params'] = $this->params;        extract($this->viewVars);        $view_file = PANELS . strtolower($this->name) . '/view.ctp';        if ($view_file == null) {            die("File $view_file has not been found.");            log::write("File $view_file has not been found.");        }        ob_start();        include($view_file);        $out = ob_get_clean();        return $this->convertElements($out);    }    function convertElements($out){        $out = $this->convertLinks($out);        $out = $this->convertStatic($out);        return $out;    }    function convertStatic($out){        //pr($this->controller->logged_user);        $this->static = array(            'checkbox'=>'<input type="checkbox"/>',            'CURR_DATE'=> date('d/m/y'),            //'PENSION_NAME' => 'Lifetime saving plan',            'Employee.name' => $this->controller->logged_user['Employee']['first_name'].' '.$this->controller->logged_user['Employee']['last_name'],            'Employee.email' => $this->controller->logged_user['User']['email'],            'Employee.nino' => $this->controller->logged_user['Employee']['nino'],        );        preg_match_all('/\[\[(.*)\]\]/', $out, $matches);        $matches[2] = array();        if(isset($matches[1])) {            foreach ($matches[1] as $k => $match) {                if (isset($this->static[$match])) {                    $out = str_replace($matches[0][$k], $this->static[$match], $out);                    $matches[2][] = $this->static[$match];                }            }        }        return $out;    }    function convertLinks($out){        if (isset($_GET['remote_login'])){            $remote = '&remote_login='.$_GET['remote_login'];        } else {            $remote = '';        }        preg_match_all('/:MENUITEM:(.*?):/', $out, $matches);        $matches[2] = array();        foreach ($matches[1] as $k=>$match){            $out = str_replace($matches[0][$k], $this->controller->MenuItems->key_links[$match] . $remote,$out);            $matches[2][] =  $this->controller->MenuItems->key_links[$match] . $remote;//            die("end");        }        return $out;    }    function loadModel($model)    {        require_once('app/app_model.php');        $model_file = Paths::findPath('model', Inflector::underscore($model) . ".php");        if ($model_file == null) {            if ($this->bCreateDbSource) {                /*                 * create new db_source files xml and model START                 */                $table_name = Inflector::pluralize(Inflector::underscore($model));                $modsss->use_schema = false;                $modsss = new Model($this, false);                $res = $modsss->query("show columns from fastest__$table_name");                //    if($model == 'Zprava'){                //        var_dump($model_file) ;                //        exit('wpada');                //    }                if ($res) {                    //db_source                    Paths::getPath('db_source', $sPrName) . Inflector::underscore($model) . '.xml';                    $h = fopen(Paths::getPath('db_source', $sPrName) . Inflector::underscore($model) . '.xml', 'w+');                    fwrite($h, "<source>\n\t\t<table>{$table_name}</table>\n\t\t<cols>\n");                    while ($row = mysql_fetch_array($res)) {                        if ($row['Extra'] == 'auto_increment')                            $sAutoIncrement = "autoincrement='true'";                        else                            $sAutoIncrement = '';                        if ($row['Key'] == 'PRI')                            $sPrimaryKey = "index='primary'";                        else                            $sPrimaryKey = '';                        fwrite($h, "\t\t\t\t <col $sAutoIncrement type='{$row['Type']}' $sPrimaryKey>{$row['Field']}</col>\n");                        //                $row['Field'] =                        //                $row['Type'] =                        //                $row['Null'] =                        //                $row['Key'] =                        //                $row['Default'] =                        //                $row['Extra'] =                    }                    $ret = fwrite($h, "\t\t</cols>\n</source>");                    fclose($h);                    //model                    $h = fopen(Paths::getPath('model', $sPrName) . Inflector::underscore($model) . '.php', 'w+');                    fwrite($h,                        "<?php \n class $model extends AppModel {\n    var \$debug = false;    var \$name = '$model';    public \$con_kos = false;    public \$con_status = false;\n\n}\n?>");                    fclose($h);                    $model_file = Paths::findPath('model', Inflector::underscore($model) . ".php");                    if (!$model_file) {                        die('Soubor pro model ' . Inflector::underscore($model) . ".php" . ' nebyl nalezen');                    }                    require_once($model_file);                } else {                    /*                     * create new db_source files xml and model END                     */                    die('Soubor pro model ' . Inflector::underscore($model) . ".php" . ' nebyl nalezen');                }            } else {                die('Soubor pro model ' . Inflector::underscore($model) . ".php" . ' nebyl nalezen');            }        } else {            require_once($model_file);            if ($this->bModifyDbSource) {                /*                 * create new db_source files xml and model START                 */                $table_name = Inflector::pluralize(Inflector::underscore($model));                $modsss = new $model($this, false);                $res = $modsss->query("show columns from fastest__$table_name");                if ($res) {                    //db_source                    Paths::getPath('db_source', $sPrName) . Inflector::underscore($model) . '.xml';                    $h = fopen(Paths::getPath('db_source', $sPrName) . Inflector::underscore($model) . '.xml', 'w+');                    fwrite($h, "<source>\n\t\t<table>wapis__{$table_name}</table>\n\t\t<cols>\n");                    while ($row = mysql_fetch_array($res)) {                        if ($row['Extra'] == 'auto_increment')                            $sAutoIncrement = "autoincrement='true'";                        else                            $sAutoIncrement = '';                        if ($row['Key'] == 'PRI')                            $sPrimaryKey = "index='primary'";                        else                            $sPrimaryKey = '';                        fwrite($h, "\t\t\t\t <col $sAutoIncrement type='{$row['Type']}' $sPrimaryKey>{$row['Field']}</col>\n");                        //                $row['Field'] =                        //                $row['Type'] =                        //                $row['Null'] =                        //                $row['Key'] =                        //                $row['Default'] =                        //                $row['Extra'] =                    }                    $ret = fwrite($h, "\t\t</cols>\n</source>");                    fclose($h);                    //model                    /*                      $h = fopen(Paths::getPath('model', $sPrName) . Inflector::underscore($model) . '.php', 'w+');                      fwrite($h,                      "<?php \n class $model extends AppModel {\n                      var \$debug = false;                      var \$name = '$model';                      public \$con_kos = false;                      public \$con_status = false;\n\n                      }                      \n                      ?>"); */                    //                fclose($h);                    //                $model_file = Paths::findPath('model', Inflector::underscore($model) . ".php");                    //                if (!$model_file) {                    //                    die('Soubor pro model ' . Inflector::underscore($model) . ".php" . ' nebyl nalezen');                    //                }                } else {                    /*                     * create new db_source files xml and model END                     */                    die('Soubor pro model ' . Inflector::underscore($model) . ".php" . ' nebyl nalezen');                }            }        }        $this->$model = new $model($this);    }    public function set($one, $two = null)    {        $data = array();        if (is_array($one)) {            if (is_array($two)) {                $data = array_combine($one, $two);            } else {                $data = $one;            }        } else {            $data = array($one => $two);        }        $this->viewVars = array_merge($this->viewVars, $data);    }}?>